--- 
title: "Analisis FICs Colombia"
format: 
  dashboard:
    theme:
        - Slate
        - custom.scss
    nav-buttons:
        - icon: github
          href: https://github.com/
server: shiny
---

```{r}
#| context: setup
library(shiny)
library(shinyWidgets)
library(shinydashboard)

options(scipen = 999)

library(tidyverse)
library(lubridate)
library(arrow)
library(DT)
library(timetk)

source("scripts/facts_dims_filters.R")

formatThousands <- JS(
  "function(data) {",
  "  return '$' + Math.floor(data / 1000000).toLocaleString() + 'M'",
  "}")

n1 <- 30
n2 <- 365
 
fics_disponibles <-  read_parquet("datos_tablero/fics_disponibles.parquet") %>% 
  rent_vol(periodo = n1, participacion = Participacion, fecha = Fecha) %>% 
  rent_vol(periodo = n2, participacion = Participacion, fecha = Fecha)
  
fics_dims <-  read_parquet("datos_tablero/fics_dims.parquet")

fics_tabla <- fics_disponibles %>% 
  filter(Fecha == max(Fecha)) %>% 
  select(-c(precierre_fondo_dia_t, crecimiento_dia)) %>% 
  left_join(fics_dims %>% 
              select(-`Tipo Entidad`), 
            by = "cod") %>% 
  select(`Nombre Entidad`,`Fondo`, Participacion,
         dplyr::starts_with("rent"),
         dplyr::starts_with("vol"),
         `Valor Cierre`, Rendimientos,
         `Valor Transacciones`, Inversionistas, Unidades, `Valor Unidad`) %>% 
  mutate(`Valor Unidad` = round(`Valor Unidad`, 2)) %>% 
  set_names(str_to_title(str_replace(names(.), "_", " ")))


  
```


# Tabla

## {.sidebar}

```{r}
h6("FILTROS" , align = "center")
tags$hr()
uiOutput("numInput1")
uiOutput("numInput2")
```


## Row {width=60%}

```{r}
cat("title=", "Resumen FICs Vigentes. Fecha de corte: ", as.character(max(fics_disponibles$Fecha)))
span(DTOutput('plot1'),style = "font-size:75%")
```

## Row {height=30%}

```{r}
textOutput("text1")
```

```{r}
textOutput("text2")
```

# Tabla 2

## {.sidebar}

```{r}
"2"
```


## Row {height=70%}

```{r}
"FY"
```

## Row {height=30%}

```{r}
2
```

```{r}
2
```


```{r}
#| context: server

  global <- reactiveValues(numVal1 = 10, numVal2 = 10, numMin = 1, numMax = 100)
  
  numVal1 <- reactive({
    if(!is.null(input$num1) && !is.na(as.numeric(input$num1)) && input$num1 != "-"){
      if(input$num1 < global$numMin) return(global$numMin)
      if(input$num1 > global$numMax) return(global$numMax)
      return(input$num1)
    }else{
      return(global$numVal1)
    }
  })
  
  numVal2 <- reactive({
    if(!is.null(input$num2) && !is.na(as.numeric(input$num2)) && input$num2 != "-"){
      if(input$num2 < global$numMin) return(global$numMin)
      if(input$num2 > global$numMax) return(global$numMax)
      return(input$num2)
    }else{
      return(global$numVal2)
    }
  })
  
  output$numInput1 <- renderUI(numericInput("num1", "Observations 1:", min = global$numMin, max = global$numMax, value = numVal1()))
  output$numInput2 <- renderUI(numericInput("num2", "Observations 2:", min = global$numMin, max = global$numMax, value = numVal2()))
  output$text1 <- renderText(input$num1)
  output$text2 <- renderText(input$num2)


output$plot1 <- renderDT(
  datatable(
        fics_tabla, 
        filter = 'none',
        rownames= FALSE,
        plugins = "ellipsis",
        class = 'nowrap display',
        extensions = "FixedColumns",
        options = list(dom = 'Brtip',
                       pageLength = 19,
                       fixedColumns = list(leftColumns = 3),
                       columnDefs = list(
                         list(
                           targets = 7:9, 
                           render = formatThousands),
                         list(
                           targets = 0,
                           render = JS("$.fn.dataTable.render.ellipsis( 20, false )")
                           ),
                         list(
                           targets = 1,
                           render = JS("$.fn.dataTable.render.ellipsis( 30, false )")
                           )
                         )
                       )
        ) %>% 
    formatCurrency(11, currency = "", digits = 0) %>% 
    formatCurrency(12, currency = "", digits = 2) %>% 
    formatCurrency(13, digits = 2) %>% 
    formatPercentage(4:7, digits = 2)
  )

```

